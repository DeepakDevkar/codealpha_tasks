import json
from datetime import datetime

class Room:
    def __init__(self, room_type, room_number, price):
        self.room_type = room_type
        self.room_number = room_number
        self.price = price
        self.is_booked = False

class Hotel:
    def __init__(self):
        self.rooms = []
        self.load_rooms()

    def load_rooms(self):
        try:
            with open('rooms.json', 'r') as f:
                self.rooms = [Room(**room) for room in json.load(f)]
        except FileNotFoundError:
            # Create default rooms if none exist
            self.rooms = [
                Room("Standard", 101, 100),
                Room("Deluxe", 102, 150),
                Room("Suite", 103, 200)
            ]
            self.save_rooms()

    def save_rooms(self):
        with open('rooms.json', 'w') as f:
            json.dump([room.__dict__ for room in self.rooms], f)

    def search_rooms(self):
        available_rooms = [room for room in self.rooms if not room.is_booked]
        return available_rooms

    def book_room(self, room_number, customer_name):
        for room in self.rooms:
            if room.room_number == room_number and not room.is_booked:
                room.is_booked = True
                room.customer_name = customer_name
                self.save_rooms()
                return f"Room {room_number} booked successfully!"
        return "Room not available."

    def cancel_booking(self, room_number):
        for room in self.rooms:
            if room.room_number == room_number and room.is_booked:
                room.is_booked = False
                del room.customer_name
                self.save_rooms()
                return f"Booking for room {room_number} has been canceled."
        return "Room not booked."

    def view_bookings(self):
        booked_rooms = [room for room in self.rooms if room.is_booked]
        return booked_rooms

class Payment:
    @staticmethod
    def simulate_payment(amount):
        print(f"Processing payment of ${amount}...")
        # Simulating payment success
        return True

def main():
    hotel = Hotel()
    while True:
        print("\nHotel Reservation System")
        print("1. Search Rooms")
        print("2. Book Room")
        print("3. Cancel Reservation")
        print("4. View Bookings")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            available_rooms = hotel.search_rooms()
            print("Available Rooms:")
            for room in available_rooms:
                print(f"Type: {room.room_type}, Number: {room.room_number}, Price: {room.price}")

        elif choice == '2':
            room_number = int(input("Enter room number to book: "))
            customer_name = input("Enter customer name: ")
            booking_message = hotel.book_room(room_number, customer_name)
            if "successfully" in booking_message:
                amount = next(room.price for room in hotel.rooms if room.room_number == room_number)
                if Payment.simulate_payment(amount):
                    print(booking_message)
            else:
                print(booking_message)

        elif choice == '3':
            room_number = int(input("Enter room number to cancel: "))
            print(hotel.cancel_booking(room_number))

        elif choice == '4':
            booked_rooms = hotel.view_bookings()
            print("Current Bookings:")
            for room in booked_rooms:
                print(f"Type: {room.room_type}, Number: {room.room_number}, Customer: {room.customer_name}")

        elif choice == '5':
            print("Thank you for using the Hotel Reservation System!")
            break

if __name__ == "__main__":
    main()
